import numpy as np
import pandas as pd

from sklearn.decomposition import PCA

X = np.array([[2.5, 2.4], [0.5, 0.7], [2.2, 2.9], [1.9, 2.2], 
 [3.1, 3.0], [2.3, 2.7],[2.0, 1.6], [1.0, 1.1], [1.5,1.6], [1.1,0.9]]) 
from sklearn.decomposition import PCA 
pca = PCA(n_components = 1) 
X_train = pca.fit_transform(X) 
print(X_train)
from sklearn.datasets import load_iris 
irisData=load_iris()
X=irisData.data
Y=irisData.target
print(X)
print(Y)
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)
print(X_pca)
from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(X_pca,Y,test_size=0.2,random_state=1)
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
knn=KNeighborsClassifier(n_neighbors=5)
knn.fit(xtrain,ytrain)
ypredict=knn.predict(xtest)
print(accuracy_score(ytest,ypredict))
from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(X,Y,test_size=0.2,random_state=1)
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
knn=KNeighborsClassifier(n_neighbors=5)
knn.fit(xtrain,ytrain)
ypredict=knn.predict(xtest)
print(accuracy_score(ytest,ypredict))
from sklearn.datasets import make_circles 
from sklearn.decomposition import KernelPCA 
X, y = make_circles(n_samples=1000, random_state=123, noise=0.1, factor=0.2) 
print("Original Size:",X.shape) 
transformer = KernelPCA(n_components=1, kernel='rbf') 
X_transformed = transformer.fit_transform(X) 
print("After reduction:", X_transformed.shape)
